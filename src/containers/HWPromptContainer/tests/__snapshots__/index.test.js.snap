// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<HWPromptContainer /> should render correctly with device type passed 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HWPromptContainer
    currentWalletWithInfo={
        Immutable.Map {
            deviceId: "041ca8e96420e95a106e8c9bb3c9fb9e8c00d4b11cac562888c898000b5cec366c03a0f84574716fac6c7a7df47a925f0e30f5286546adf3179b5a08dc9d8e09da",
            address: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
            type: "lns",
            name: "lns",
            derivationPath: "m/44'/60'/0'/0",
            transactions: Immutable.Map {
                loading: false,
                error: null,
                transactions: Immutable.List [
                    Immutable.Map {
                        decimalAmount: "0.0000000001",
                        counterpartyAddress: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        block: Immutable.Map {
                            number: 3780091,
                            timestamp: "2018-08-06T02:32:00.000Z",
                        },
                        hash: "0x84db5d53f1b5e82bdae027408989cf5451191d76b8b021710cfa0d95bbd5d34c",
                        currency: "ETH",
                        sender: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        amount: "100000000",
                        symbol: "ETH",
                        recipient: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
                        type: "received",
                        fiatValue: "0.0000000412",
                        confirmations: "3",
                    },
                    Immutable.Map {
                        decimalAmount: "0.000000000000000005",
                        counterpartyAddress: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        block: Immutable.Map {
                            number: 3780091,
                            timestamp: "2018-08-06T02:32:00.000Z",
                        },
                        hash: "0x84db5d53f1b5e82bdae027408989cf5451191d76b8b021710cfa0d95bbd5d34c",
                        currency: "0x583cbbb8a8443b38abcc0c956bece47340ea1367",
                        sender: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
                        amount: "5",
                        symbol: "BOKKY",
                        recipient: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        type: "sent",
                        fiatValue: "0",
                        confirmations: "3",
                    },
                ],
            },
            balances: Immutable.Map {
                loading: false,
                error: null,
                assets: Immutable.List [
                    Immutable.Map {
                        balance: "0.198937",
                        currency: "ETH",
                        symbol: "ETH",
                        value: Immutable.Map {
                            eth: "0.198937",
                            btc: "0.00198937",
                            usd: "81.962044",
                        },
                    },
                    Immutable.Map {
                        balance: "1.231288e-12",
                        currency: "0x583cbbb8a8443b38abcc0c956bece47340ea1367",
                        symbol: "BOKKY",
                        value: Immutable.Map {
                            eth: "0",
                            btc: "0",
                            usd: "0",
                        },
                    },
                ],
                total: Immutable.Map {
                    eth: "0.198937",
                    btc: "0.00198937",
                    usd: "81.962044",
                },
            },
        }
    }
    deviceType="lns"
    ledgerInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
    trezorInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <HWPrompt
        deviceType="lns"
        ledgerInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
        trezorInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
/>,
      "style": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "deviceType": "lns",
        "ledgerInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
        "trezorInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <HWPrompt
          deviceType="lns"
          ledgerInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
          trezorInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
/>,
        "style": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "deviceType": "lns",
          "ledgerInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
          "trezorInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<HWPromptContainer /> should render correctly without device type passed 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HWPromptContainer
    currentWalletWithInfo={
        Immutable.Map {
            deviceId: "041ca8e96420e95a106e8c9bb3c9fb9e8c00d4b11cac562888c898000b5cec366c03a0f84574716fac6c7a7df47a925f0e30f5286546adf3179b5a08dc9d8e09da",
            address: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
            type: "lns",
            name: "lns",
            derivationPath: "m/44'/60'/0'/0",
            transactions: Immutable.Map {
                loading: false,
                error: null,
                transactions: Immutable.List [
                    Immutable.Map {
                        decimalAmount: "0.0000000001",
                        counterpartyAddress: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        block: Immutable.Map {
                            number: 3780091,
                            timestamp: "2018-08-06T02:32:00.000Z",
                        },
                        hash: "0x84db5d53f1b5e82bdae027408989cf5451191d76b8b021710cfa0d95bbd5d34c",
                        currency: "ETH",
                        sender: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        amount: "100000000",
                        symbol: "ETH",
                        recipient: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
                        type: "received",
                        fiatValue: "0.0000000412",
                        confirmations: "3",
                    },
                    Immutable.Map {
                        decimalAmount: "0.000000000000000005",
                        counterpartyAddress: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        block: Immutable.Map {
                            number: 3780091,
                            timestamp: "2018-08-06T02:32:00.000Z",
                        },
                        hash: "0x84db5d53f1b5e82bdae027408989cf5451191d76b8b021710cfa0d95bbd5d34c",
                        currency: "0x583cbbb8a8443b38abcc0c956bece47340ea1367",
                        sender: "0x1c7429f62595097315289ceBaC1fDbdA587Ad512",
                        amount: "5",
                        symbol: "BOKKY",
                        recipient: "0x910c4ba923b2243dc13e00a066eefb8ffd905eb0",
                        type: "sent",
                        fiatValue: "0",
                        confirmations: "3",
                    },
                ],
            },
            balances: Immutable.Map {
                loading: false,
                error: null,
                assets: Immutable.List [
                    Immutable.Map {
                        balance: "0.198937",
                        currency: "ETH",
                        symbol: "ETH",
                        value: Immutable.Map {
                            eth: "0.198937",
                            btc: "0.00198937",
                            usd: "81.962044",
                        },
                    },
                    Immutable.Map {
                        balance: "1.231288e-12",
                        currency: "0x583cbbb8a8443b38abcc0c956bece47340ea1367",
                        symbol: "BOKKY",
                        value: Immutable.Map {
                            eth: "0",
                            btc: "0",
                            usd: "0",
                        },
                    },
                ],
                total: Immutable.Map {
                    eth: "0.198937",
                    btc: "0.00198937",
                    usd: "81.962044",
                },
            },
        }
    }
    ledgerInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
    trezorInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <HWPrompt
        deviceType="lns"
        ledgerInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
        trezorInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
/>,
      "style": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "deviceType": "lns",
        "ledgerInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
        "trezorInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <HWPrompt
          deviceType="lns"
          ledgerInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
          trezorInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
/>,
        "style": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "deviceType": "lns",
          "ledgerInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
          "trezorInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<HWPromptContainer /> should render correctly without device type passed and empty current wallet 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HWPromptContainer
    currentWalletWithInfo={
        Immutable.List [
        ]
    }
    ledgerInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
    trezorInfo={
        Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
        }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <HWPrompt
        deviceType={undefined}
        ledgerInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
        trezorInfo={
                Immutable.Map {
                        status: "connected",
                        connected: true,
                        addresses: Immutable.Map {
                        },
                        id: "ajlsdfkjas",
                        confTxOnDevice: false,
                }
        }
/>,
      "style": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "deviceType": undefined,
        "ledgerInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
        "trezorInfo": Immutable.Map {
          status: "connected",
          connected: true,
          addresses: Immutable.Map {
          },
          id: "ajlsdfkjas",
          confTxOnDevice: false,
},
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <HWPrompt
          deviceType={undefined}
          ledgerInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
          trezorInfo={
                    Immutable.Map {
                              status: "connected",
                              connected: true,
                              addresses: Immutable.Map {
                              },
                              id: "ajlsdfkjas",
                              confTxOnDevice: false,
                    }
          }
/>,
        "style": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "deviceType": undefined,
          "ledgerInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
          "trezorInfo": Immutable.Map {
            status: "connected",
            connected: true,
            addresses: Immutable.Map {
            },
            id: "ajlsdfkjas",
            confTxOnDevice: false,
},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
