// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Settings should render correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Settings
    currentNetwork={
        Object {
            "apiDomain": "api2.dev.hubii.net",
            "defaultNahmiiProvider": NahmiiProvider {
              "_balances": Object {},
              "_emitted": Object {
                "block": -2,
              },
              "_events": Array [],
              "_fastQueryDate": 0,
              "_lastBlockNumber": -2,
              "_network": Object {
                "_defaultProvider": [Function],
                "chainId": 3,
                "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                "name": "ropsten",
              },
              "_pollingInterval": 4000,
              "connection": Object {
                "url": "http://geth-ropsten.dev.hubii.net",
              },
              "ready": Promise {},
            },
            "identityServiceAppId": "appid",
            "identityServiceSecret": "secret",
            "nahmiiProvider": NahmiiProvider {
              "_balances": Object {},
              "_emitted": Object {
                "block": -2,
              },
              "_events": Array [],
              "_fastQueryDate": 0,
              "_lastBlockNumber": -2,
              "_network": Object {
                "_defaultProvider": [Function],
                "chainId": 3,
                "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                "name": "ropsten",
              },
              "_pollingInterval": 4000,
              "connection": Object {
                "url": "http://geth-ropsten.dev.hubii.net",
              },
              "ready": Promise {},
            },
            "name": "ropsten",
            "provider": FallbackProvider {
              "_balances": Object {},
              "_emitted": Object {
                "block": -2,
              },
              "_events": Array [],
              "_fastQueryDate": 0,
              "_lastBlockNumber": -2,
              "_network": Object {
                "_defaultProvider": [Function],
                "chainId": 3,
                "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                "name": "ropsten",
              },
              "_pollingInterval": 4000,
              "_providers": Array [
                InfuraProvider {
                  "_balances": Object {},
                  "_emitted": Object {
                    "block": -2,
                  },
                  "_events": Array [],
                  "_fastQueryDate": 0,
                  "_lastBlockNumber": -2,
                  "_network": Object {
                    "_defaultProvider": [Function],
                    "chainId": 3,
                    "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                    "name": "ropsten",
                  },
                  "_pollingInterval": 4000,
                  "apiAccessToken": null,
                  "connection": Object {
                    "url": "https://ropsten.infura.io/v3/7d0d81d0919f4f05b9ab6634be01ee73",
                  },
                  "projectId": "7d0d81d0919f4f05b9ab6634be01ee73",
                  "ready": Promise {},
                },
                EtherscanProvider {
                  "_balances": Object {},
                  "_emitted": Object {
                    "block": -2,
                  },
                  "_events": Array [],
                  "_fastQueryDate": 0,
                  "_lastBlockNumber": -2,
                  "_network": Object {
                    "_defaultProvider": [Function],
                    "chainId": 3,
                    "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                    "name": "ropsten",
                  },
                  "_pollingInterval": 4000,
                  "apiKey": undefined,
                  "baseUrl": "https://api-ropsten.etherscan.io",
                  "ready": Promise {},
                },
              ],
              "ready": Promise {},
            },
            "walletApiEndpoint": [Function],
          }
    }
    intl={
        Object {
            "formatMessage": [Function],
            "formatNumber": [Function],
          }
    }
    locale="en"
    onBatchExport={[Function]}
    onBatchImport={[Function]}
    onChangeLocale={[Function]}
    onChangeNetwork={[Function]}
    onDecryptImport={[Function]}
    supportedNetworks={
        Immutable.Map {
            mainnet: Immutable.Map {
                name: "mainnet",
                provider: FallbackProvider {
                    "_balances": Object {},
                    "_emitted": Object {
                      "block": -2,
                    },
                    "_events": Array [],
                    "_fastQueryDate": 0,
                    "_lastBlockNumber": -2,
                    "_network": Object {
                      "_defaultProvider": [Function],
                      "chainId": 1,
                      "ensAddress": "0x314159265dd8dbb310642f98f50c066173c1259b",
                      "name": "homestead",
                    },
                    "_pollingInterval": 4000,
                    "_providers": Array [
                      InfuraProvider {
                        "_balances": Object {},
                        "_emitted": Object {
                          "block": -2,
                        },
                        "_events": Array [],
                        "_fastQueryDate": 0,
                        "_lastBlockNumber": -2,
                        "_network": Object {
                          "_defaultProvider": [Function],
                          "chainId": 1,
                          "ensAddress": "0x314159265dd8dbb310642f98f50c066173c1259b",
                          "name": "homestead",
                        },
                        "_pollingInterval": 4000,
                        "apiAccessToken": null,
                        "connection": Object {
                          "url": "https://mainnet.infura.io/v3/7d0d81d0919f4f05b9ab6634be01ee73",
                        },
                        "projectId": "7d0d81d0919f4f05b9ab6634be01ee73",
                        "ready": Promise {},
                      },
                      EtherscanProvider {
                        "_balances": Object {},
                        "_emitted": Object {
                          "block": -2,
                        },
                        "_events": Array [],
                        "_fastQueryDate": 0,
                        "_lastBlockNumber": -2,
                        "_network": Object {
                          "_defaultProvider": [Function],
                          "chainId": 1,
                          "ensAddress": "0x314159265dd8dbb310642f98f50c066173c1259b",
                          "name": "homestead",
                        },
                        "_pollingInterval": 4000,
                        "apiKey": undefined,
                        "baseUrl": "https://api.etherscan.io",
                        "ready": Promise {},
                      },
                    ],
                    "ready": Promise {},
                  },
                defaultNahmiiProvider: NahmiiProvider {
                    "_balances": Object {},
                    "_emitted": Object {
                      "block": -2,
                    },
                    "_events": Array [],
                    "_fastQueryDate": 0,
                    "_lastBlockNumber": -2,
                    "_network": Object {
                      "_defaultProvider": [Function],
                      "chainId": 1,
                      "ensAddress": "0x314159265dd8dbb310642f98f50c066173c1259b",
                      "name": "homestead",
                    },
                    "_pollingInterval": 4000,
                    "connection": Object {
                      "url": "http://ethereum.hubii.com:8545",
                    },
                    "ready": Promise {},
                  },
                apiDomain: "api.nahmii.io",
                walletApiEndpoint: [Function],
                identityServiceSecret: "secret",
                identityServiceAppId: "appid",
            },
            ropsten: Immutable.Map {
                name: "ropsten",
                provider: FallbackProvider {
                    "_balances": Object {},
                    "_emitted": Object {
                      "block": -2,
                    },
                    "_events": Array [],
                    "_fastQueryDate": 0,
                    "_lastBlockNumber": -2,
                    "_network": Object {
                      "_defaultProvider": [Function],
                      "chainId": 3,
                      "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                      "name": "ropsten",
                    },
                    "_pollingInterval": 4000,
                    "_providers": Array [
                      InfuraProvider {
                        "_balances": Object {},
                        "_emitted": Object {
                          "block": -2,
                        },
                        "_events": Array [],
                        "_fastQueryDate": 0,
                        "_lastBlockNumber": -2,
                        "_network": Object {
                          "_defaultProvider": [Function],
                          "chainId": 3,
                          "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                          "name": "ropsten",
                        },
                        "_pollingInterval": 4000,
                        "apiAccessToken": null,
                        "connection": Object {
                          "url": "https://ropsten.infura.io/v3/7d0d81d0919f4f05b9ab6634be01ee73",
                        },
                        "projectId": "7d0d81d0919f4f05b9ab6634be01ee73",
                        "ready": Promise {},
                      },
                      EtherscanProvider {
                        "_balances": Object {},
                        "_emitted": Object {
                          "block": -2,
                        },
                        "_events": Array [],
                        "_fastQueryDate": 0,
                        "_lastBlockNumber": -2,
                        "_network": Object {
                          "_defaultProvider": [Function],
                          "chainId": 3,
                          "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                          "name": "ropsten",
                        },
                        "_pollingInterval": 4000,
                        "apiKey": undefined,
                        "baseUrl": "https://api-ropsten.etherscan.io",
                        "ready": Promise {},
                      },
                    ],
                    "ready": Promise {},
                  },
                defaultNahmiiProvider: NahmiiProvider {
                    "_balances": Object {},
                    "_emitted": Object {
                      "block": -2,
                    },
                    "_events": Array [],
                    "_fastQueryDate": 0,
                    "_lastBlockNumber": -2,
                    "_network": Object {
                      "_defaultProvider": [Function],
                      "chainId": 3,
                      "ensAddress": "0x112234455c3a32fd11230c42e7bccd4a84e02010",
                      "name": "ropsten",
                    },
                    "_pollingInterval": 4000,
                    "connection": Object {
                      "url": "http://geth-ropsten.dev.hubii.net",
                    },
                    "ready": Promise {},
                  },
                apiDomain: "api2.dev.hubii.net",
                walletApiEndpoint: [Function],
                identityServiceSecret: "secret",
                identityServiceAppId: "appid",
            },
        }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <TopHeader>
          <Heading>
                    settings
          </Heading>
</TopHeader>,
        <style__Body>
          <style__SettingWrapper>
                    <style__StyledSectionHeading>
                              setting_network
                    </style__StyledSectionHeading>
                    <Select
                              onChange={[Function]}
                              style={
                                        Object {
                                                  "width": "15rem",
                                                }
                              }
                              value="Ropsten [TESTNET]"
                    >
                              <Option
                                        value="mainnet"
                              >
                                        Mainnet
                              </Option>
                              <Option
                                        value="ropsten"
                              >
                                        Ropsten [TESTNET]
                              </Option>
                    </Select>
          </style__SettingWrapper>
          <style__SettingWrapper>
                    <style__StyledSectionHeading>
                              setting_language
                    </style__StyledSectionHeading>
                    <Select
                              onChange={[Function]}
                              style={
                                        Object {
                                                  "width": "15rem",
                                                }
                              }
                              value="en"
                    >
                              <Option
                                        value="en"
                              >
                                        English
                              </Option>
                    </Select>
          </style__SettingWrapper>
          <style__SettingWrapper>
                    <style__StyledSectionHeading>
                              backup
                    </style__StyledSectionHeading>
                    <style__StyledButton
                              onClick={[Function]}
                    >
                              <Icon
                                        type="upload"
                              />
                              <Text>
                                        export
                              </Text>
                    </style__StyledButton>
                    <style__StyledButton
                              onClick={[Function]}
                    >
                              <Icon
                                        type="download"
                              />
                              <Text>
                                        import
                              </Text>
                    </style__StyledButton>
          </style__SettingWrapper>
</style__Body>,
        <Modal__Modal
          destroyOnClose={true}
          footer={null}
          maskClosable={true}
          onCancel={[Function]}
          style={
                    Object {
                              "marginTop": "1.43rem",
                            }
          }
          visible={false}
          width="40rem"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Heading>
            settings
</Heading>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "settings",
          },
          "ref": null,
          "rendered": "settings",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <style__SettingWrapper>
              <style__StyledSectionHeading>
                            setting_network
              </style__StyledSectionHeading>
              <Select
                            onChange={[Function]}
                            style={
                                          Object {
                                                        "width": "15rem",
                                                      }
                            }
                            value="Ropsten [TESTNET]"
              >
                            <Option
                                          value="mainnet"
                            >
                                          Mainnet
                            </Option>
                            <Option
                                          value="ropsten"
                            >
                                          Ropsten [TESTNET]
                            </Option>
              </Select>
</style__SettingWrapper>,
            <style__SettingWrapper>
              <style__StyledSectionHeading>
                            setting_language
              </style__StyledSectionHeading>
              <Select
                            onChange={[Function]}
                            style={
                                          Object {
                                                        "width": "15rem",
                                                      }
                            }
                            value="en"
              >
                            <Option
                                          value="en"
                            >
                                          English
                            </Option>
              </Select>
</style__SettingWrapper>,
            <style__SettingWrapper>
              <style__StyledSectionHeading>
                            backup
              </style__StyledSectionHeading>
              <style__StyledButton
                            onClick={[Function]}
              >
                            <Icon
                                          type="upload"
                            />
                            <Text>
                                          export
                            </Text>
              </style__StyledButton>
              <style__StyledButton
                            onClick={[Function]}
              >
                            <Icon
                                          type="download"
                            />
                            <Text>
                                          import
                            </Text>
              </style__StyledButton>
</style__SettingWrapper>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <style__StyledSectionHeading>
                  setting_network
</style__StyledSectionHeading>,
                <Select
                  onChange={[Function]}
                  style={
                                    Object {
                                                      "width": "15rem",
                                                    }
                  }
                  value="Ropsten [TESTNET]"
>
                  <Option
                                    value="mainnet"
                  >
                                    Mainnet
                  </Option>
                  <Option
                                    value="ropsten"
                  >
                                    Ropsten [TESTNET]
                  </Option>
</Select>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "setting_network",
                },
                "ref": null,
                "rendered": "setting_network",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Option
                      value="mainnet"
>
                      Mainnet
</Option>,
                    <Option
                      value="ropsten"
>
                      Ropsten [TESTNET]
</Option>,
                  ],
                  "onChange": [Function],
                  "style": Object {
                    "width": "15rem",
                  },
                  "value": "Ropsten [TESTNET]",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "mainnet",
                    "nodeType": "class",
                    "props": Object {
                      "children": "Mainnet",
                      "value": "mainnet",
                    },
                    "ref": null,
                    "rendered": "Mainnet",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "ropsten",
                    "nodeType": "class",
                    "props": Object {
                      "children": "Ropsten [TESTNET]",
                      "value": "ropsten",
                    },
                    "ref": null,
                    "rendered": "Ropsten [TESTNET]",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <style__StyledSectionHeading>
                  setting_language
</style__StyledSectionHeading>,
                <Select
                  onChange={[Function]}
                  style={
                                    Object {
                                                      "width": "15rem",
                                                    }
                  }
                  value="en"
>
                  <Option
                                    value="en"
                  >
                                    English
                  </Option>
</Select>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "setting_language",
                },
                "ref": null,
                "rendered": "setting_language",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Option
                      value="en"
>
                      English
</Option>,
                  ],
                  "onChange": [Function],
                  "style": Object {
                    "width": "15rem",
                  },
                  "value": "en",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "en",
                    "nodeType": "class",
                    "props": Object {
                      "children": "English",
                      "value": "en",
                    },
                    "ref": null,
                    "rendered": "English",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <style__StyledSectionHeading>
                  backup
</style__StyledSectionHeading>,
                <style__StyledButton
                  onClick={[Function]}
>
                  <Icon
                                    type="upload"
                  />
                  <Text>
                                    export
                  </Text>
</style__StyledButton>,
                <style__StyledButton
                  onClick={[Function]}
>
                  <Icon
                                    type="download"
                  />
                  <Text>
                                    import
                  </Text>
</style__StyledButton>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "backup",
                },
                "ref": null,
                "rendered": "backup",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Icon
                      type="upload"
/>,
                    <Text>
                      export
</Text>,
                  ],
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "type": "upload",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "export",
                    },
                    "ref": null,
                    "rendered": "export",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Icon
                      type="download"
/>,
                    <Text>
                      import
</Text>,
                  ],
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "type": "download",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "import",
                    },
                    "ref": null,
                    "rendered": "import",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": undefined,
          "destroyOnClose": true,
          "footer": null,
          "maskClosable": true,
          "onCancel": [Function],
          "style": Object {
            "marginTop": "1.43rem",
          },
          "visible": false,
          "width": "40rem",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <TopHeader>
            <Heading>
                        settings
            </Heading>
</TopHeader>,
          <style__Body>
            <style__SettingWrapper>
                        <style__StyledSectionHeading>
                                    setting_network
                        </style__StyledSectionHeading>
                        <Select
                                    onChange={[Function]}
                                    style={
                                                Object {
                                                            "width": "15rem",
                                                          }
                                    }
                                    value="Ropsten [TESTNET]"
                        >
                                    <Option
                                                value="mainnet"
                                    >
                                                Mainnet
                                    </Option>
                                    <Option
                                                value="ropsten"
                                    >
                                                Ropsten [TESTNET]
                                    </Option>
                        </Select>
            </style__SettingWrapper>
            <style__SettingWrapper>
                        <style__StyledSectionHeading>
                                    setting_language
                        </style__StyledSectionHeading>
                        <Select
                                    onChange={[Function]}
                                    style={
                                                Object {
                                                            "width": "15rem",
                                                          }
                                    }
                                    value="en"
                        >
                                    <Option
                                                value="en"
                                    >
                                                English
                                    </Option>
                        </Select>
            </style__SettingWrapper>
            <style__SettingWrapper>
                        <style__StyledSectionHeading>
                                    backup
                        </style__StyledSectionHeading>
                        <style__StyledButton
                                    onClick={[Function]}
                        >
                                    <Icon
                                                type="upload"
                                    />
                                    <Text>
                                                export
                                    </Text>
                        </style__StyledButton>
                        <style__StyledButton
                                    onClick={[Function]}
                        >
                                    <Icon
                                                type="download"
                                    />
                                    <Text>
                                                import
                                    </Text>
                        </style__StyledButton>
            </style__SettingWrapper>
</style__Body>,
          <Modal__Modal
            destroyOnClose={true}
            footer={null}
            maskClosable={true}
            onCancel={[Function]}
            style={
                        Object {
                                    "marginTop": "1.43rem",
                                  }
            }
            visible={false}
            width="40rem"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Heading>
              settings
</Heading>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "settings",
            },
            "ref": null,
            "rendered": "settings",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <style__SettingWrapper>
                <style__StyledSectionHeading>
                                setting_network
                </style__StyledSectionHeading>
                <Select
                                onChange={[Function]}
                                style={
                                                Object {
                                                                "width": "15rem",
                                                              }
                                }
                                value="Ropsten [TESTNET]"
                >
                                <Option
                                                value="mainnet"
                                >
                                                Mainnet
                                </Option>
                                <Option
                                                value="ropsten"
                                >
                                                Ropsten [TESTNET]
                                </Option>
                </Select>
</style__SettingWrapper>,
              <style__SettingWrapper>
                <style__StyledSectionHeading>
                                setting_language
                </style__StyledSectionHeading>
                <Select
                                onChange={[Function]}
                                style={
                                                Object {
                                                                "width": "15rem",
                                                              }
                                }
                                value="en"
                >
                                <Option
                                                value="en"
                                >
                                                English
                                </Option>
                </Select>
</style__SettingWrapper>,
              <style__SettingWrapper>
                <style__StyledSectionHeading>
                                backup
                </style__StyledSectionHeading>
                <style__StyledButton
                                onClick={[Function]}
                >
                                <Icon
                                                type="upload"
                                />
                                <Text>
                                                export
                                </Text>
                </style__StyledButton>
                <style__StyledButton
                                onClick={[Function]}
                >
                                <Icon
                                                type="download"
                                />
                                <Text>
                                                import
                                </Text>
                </style__StyledButton>
</style__SettingWrapper>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <style__StyledSectionHeading>
                    setting_network
</style__StyledSectionHeading>,
                  <Select
                    onChange={[Function]}
                    style={
                                        Object {
                                                            "width": "15rem",
                                                          }
                    }
                    value="Ropsten [TESTNET]"
>
                    <Option
                                        value="mainnet"
                    >
                                        Mainnet
                    </Option>
                    <Option
                                        value="ropsten"
                    >
                                        Ropsten [TESTNET]
                    </Option>
</Select>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "setting_network",
                  },
                  "ref": null,
                  "rendered": "setting_network",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Option
                        value="mainnet"
>
                        Mainnet
</Option>,
                      <Option
                        value="ropsten"
>
                        Ropsten [TESTNET]
</Option>,
                    ],
                    "onChange": [Function],
                    "style": Object {
                      "width": "15rem",
                    },
                    "value": "Ropsten [TESTNET]",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": "mainnet",
                      "nodeType": "class",
                      "props": Object {
                        "children": "Mainnet",
                        "value": "mainnet",
                      },
                      "ref": null,
                      "rendered": "Mainnet",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": "ropsten",
                      "nodeType": "class",
                      "props": Object {
                        "children": "Ropsten [TESTNET]",
                        "value": "ropsten",
                      },
                      "ref": null,
                      "rendered": "Ropsten [TESTNET]",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <style__StyledSectionHeading>
                    setting_language
</style__StyledSectionHeading>,
                  <Select
                    onChange={[Function]}
                    style={
                                        Object {
                                                            "width": "15rem",
                                                          }
                    }
                    value="en"
>
                    <Option
                                        value="en"
                    >
                                        English
                    </Option>
</Select>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "setting_language",
                  },
                  "ref": null,
                  "rendered": "setting_language",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Option
                        value="en"
>
                        English
</Option>,
                    ],
                    "onChange": [Function],
                    "style": Object {
                      "width": "15rem",
                    },
                    "value": "en",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": "en",
                      "nodeType": "class",
                      "props": Object {
                        "children": "English",
                        "value": "en",
                      },
                      "ref": null,
                      "rendered": "English",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <style__StyledSectionHeading>
                    backup
</style__StyledSectionHeading>,
                  <style__StyledButton
                    onClick={[Function]}
>
                    <Icon
                                        type="upload"
                    />
                    <Text>
                                        export
                    </Text>
</style__StyledButton>,
                  <style__StyledButton
                    onClick={[Function]}
>
                    <Icon
                                        type="download"
                    />
                    <Text>
                                        import
                    </Text>
</style__StyledButton>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "backup",
                  },
                  "ref": null,
                  "rendered": "backup",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Icon
                        type="upload"
/>,
                      <Text>
                        export
</Text>,
                    ],
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "type": "upload",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "export",
                      },
                      "ref": null,
                      "rendered": "export",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Icon
                        type="download"
/>,
                      <Text>
                        import
</Text>,
                    ],
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "type": "download",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "import",
                      },
                      "ref": null,
                      "rendered": "import",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
            "destroyOnClose": true,
            "footer": null,
            "maskClosable": true,
            "onCancel": [Function],
            "style": Object {
              "marginTop": "1.43rem",
            },
            "visible": false,
            "width": "40rem",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
